{"version":3,"sources":["QuestionComponent.tsx","Question.tsx","data.ts","utils.ts","NewLetter.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["QuestionComponent","props","style","textAlign","className","pictureAnswer","questionLetter","options","map","option","fontSize","onClick","e","preventDefault","currentTarget","blur","answerCallback","Question","Math","random","questionOptions","answer","letters","shuffle","array","randomIndex","currentIndex","length","floor","getMetrics","letterQuestionCount","totalScore","minLetterScore","scoreBuffer","forEach","score","value","letterScore","answers","filter","a","min","NewLetter","newLetter","doneCallback","startingLetter","App","useState","Map","letter","setLetterQuestionCount","level","setLevel","setLetter","totalQuestionCount","setTotalQuestionCount","setNewLetter","l","slice","size","correct","get","newLetterQuestionCount","set","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bd0c7dc8.chunk.js","sourcesContent":["import React from 'react';\n\ninterface QuestionProps {\n    questionLetter: string;\n    options: string[];\n    pictureAnswer: boolean\n    answerCallback(answer: string): void;\n}\n\nfunction QuestionComponent(props: QuestionProps) {\n\n    return (\n        <div style={{textAlign:'center'}}>\n            <h1 className={\"display-1\" + (props.pictureAnswer?\" bls\":\"\")}>{props.questionLetter}</h1>\n            <div className=\"d-grid gap-2\">\n                {props.options.map(option => <button className={\"btn btn-outline-primary\"+ (props.pictureAnswer?\"\":\" bls\")} style={{fontSize:\"4em\"}} key={option} onClick={(e) => {\n                    e.preventDefault()\n                    e.currentTarget.blur()\n                    props.answerCallback(option)\n                }}>{option}</button>)}\n            </div>\n        </div>\n    );\n}\n\nexport default QuestionComponent;\n","import React from 'react';\nimport QuestionComponent from \"./QuestionComponent\";\n\ninterface QuestionComponentProps{\n    answerCallback (correct: boolean, letter: string): void;\n    questionLetter: string\n    questionOptions: string[]\n}\n\nfunction Question(props: QuestionComponentProps) {\n\n    function callback(answer: string){\n        return props.answerCallback(answer === props.questionLetter, props.questionLetter)\n    }\n\n    return (\n        <QuestionComponent pictureAnswer={Math.random()>=0.5} questionLetter={props.questionLetter} options={props.questionOptions} answerCallback={callback}/>\n    );\n}\n\nexport default Question;\n","export const letters = [\n    'E',\n    'T',\n    'A',\n    'O',\n    'I',\n    'N',\n    'S',\n    'R',\n    'H',\n    'D',\n    'L',\n    'U',\n    'C',\n    'M',\n    'F',\n    'Y',\n    'W',\n    'G',\n    'P',\n    'B',\n    'V',\n    'K',\n    'X',\n    'Q',\n    'J',\n    'Z'\n];\n","//todo move\nimport {LetterScore} from \"./LetterScore\";\n\nexport function shuffle(array: any[]) {\n    let currentIndex = array.length, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n}\n\nexport interface Metrics{\n    totalScore: number\n    minLetterScore: number\n}\n\nexport function getMetrics(letterQuestionCount: Map<string, LetterScore>): Metrics {\n    let totalScore = 0\n    let minLetterScore = scoreBuffer;\n    letterQuestionCount.forEach((score, value) => {\n        let letterScore = score.answers.filter(a => a).length;\n        totalScore = totalScore + letterScore\n        minLetterScore = Math.min(minLetterScore, letterScore)\n    })\n    return {totalScore, minLetterScore};\n}\n\nexport const scoreBuffer = 5;","import React from \"react\";\n\nexport function NewLetter(props: { newLetter: string, doneCallback():void }) {\n    return <div style={{textAlign:\"center\"}}>\n        <h1 className=\"display-1\" style={{fontSize:\"4em\", textAlign: \"center\"}}>{props.newLetter}</h1>\n        <h1 className=\"display-1 bls\" style={{fontSize:\"4em\", textAlign: \"center\"}}>{props.newLetter}</h1>\n        <button className=\"btn btn-primary btn-lg\" onClick={props.doneCallback}>Continue</button>\n    </div>;\n}","import React, {useState} from 'react';\nimport Question from \"./Question\";\nimport {letters} from \"./data\";\nimport {getMetrics, scoreBuffer, shuffle} from \"./utils\";\nimport {LetterScore} from \"./LetterScore\";\nimport {NewLetter} from \"./NewLetter\";\n\nconst startingLetter = letters[0];\n\nfunction App() {\n\n    const [letterQuestionCount, setLetterQuestionCount] = useState<Map<string, LetterScore>>(new Map([[startingLetter, {\n        letter: startingLetter,\n        answers: []\n    }]]))\n    const [level, setLevel] = useState(1)\n    const [letter, setLetter] = useState(startingLetter)\n    const [totalQuestionCount, setTotalQuestionCount] = useState(1)\n    const [newLetter, setNewLetter] = useState(startingLetter)\n\n    function answerCallback(correct: boolean, letter: string) {\n        setTotalQuestionCount(totalQuestionCount + 1)\n        const letterScore = letterQuestionCount.get(letter)\n        const newLetterQuestionCount = new Map(letterQuestionCount)\n        if (letterScore) {\n            newLetterQuestionCount.set(letter, {letter, answers: [...letterScore.answers, correct].slice(-scoreBuffer)})\n        } else {\n            newLetterQuestionCount.set(letter, {letter, answers: [correct]})\n        }\n\n        const {minLetterScore} = getMetrics(newLetterQuestionCount)\n\n        if (minLetterScore / scoreBuffer >= 0.8) {\n            setLevel(level + 1)\n            const newLetter = letters[level];\n            setLetter(newLetter)\n            newLetterQuestionCount.set(newLetter, {answers: [], letter: newLetter})\n            setNewLetter(newLetter)\n        } else {\n            setLetter(shuffle(letters.slice(0, level))[0])\n        }\n        setLetterQuestionCount(newLetterQuestionCount)\n    }\n\n    const {totalScore} = getMetrics(letterQuestionCount);\n\n    const questionOptions = shuffle([letter, ...shuffle(letters.filter(l => l !== letter)).slice(-3)])\n\n    return (\n        <div className=\"App container\">\n            <div className=\"row\">\n                <div className=\"col\">Level {level}</div>\n                <div className=\"col\" style={{textAlign:\"right\"}}>Score {totalScore}/{scoreBuffer * letterQuestionCount.size}</div>\n            </div>\n\n            {newLetter && <NewLetter newLetter={newLetter} doneCallback={()=>setNewLetter(\"\")}/>}\n            {!newLetter && <Question answerCallback={answerCallback}\n                      questionLetter={letter}\n                      questionOptions={questionOptions}/>}\n        </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}